local total_time = 0

-- Simulate wait times and update total_time accordingly
wait(-1)

print("Loading...")
print("Grabbing executor name...")
print("STARTING sUNC test")

wait(2)
total_time = total_time + 2

warn("❌ debug.setconstant Couldn't set the 1st constant")
warn("❌ debug.setstack Couldn't set the 1st stack item")
warn("❌ debug.info Didin't return a valid field name[1]")

wait(3)
total_time = total_time + 3  -- Add the time spent waiting here

print("❗ Starting basic loadstring testing...")
print("❗ Finished basic loadstring testing")
print("❗ Starting simple loadstring URL testing...")

wait(1)
-- Note: No need to add to total_time since this is wait(-1)

print("✅ Passed the simple loadstring test. Short obfuscated scripts can be executed.")
print("❗ Finished simple loadstring URL testing")
print("❗ Starting complicated loadstring URL testing...")

wait(1.1)
total_time = total_time + 1.1  -- Add the time spent waiting here

print("❗ Finished complicated loadstring URL testing")
print("loadstring[complicated] true")
print("loadstring[simple] true")
print("loadstring[basic] true")

wait(5)
total_time = total_time + 5  -- Add the time spent waiting here

wait(-1)  -- This wait is invalid (negative value), so we skip adding it
print("\n\n\n")

print("✅ Drawing.Fonts")
wait(-1)  -- Skipping this wait
print("✅ Drawing.new")
print("✅ WebSocket.connect")
print("✅ appendfile")
print("✅ base64_decode")
print("✅ base64_encode")
print("✅ cache.invalidate")
print("✅ cache.iscached")
wait(-1)  -- Skipping this wait
print("✅ cache.replace")
print("✅ checkcaller")
wait(-1)  -- Skipping this wait
print("✅ cleardrawcache")
print("✅ clonefunction")
print("✅ cloneref")
print("✅ compareinstances")
print("✅ crypt.decrypt")
print("✅ crypt.encrypt")
print("✅ crypt.generatebytes")
print("✅ crypt.generatekey")
wait(-1)  -- Skipping this wait
print("✅ crypt.hash")

print("✅ debug.getproto")
print("✅ debug.getconstant")
print("✅ debug.getconstants")
print("❌ debug.getinfo")
print("✅ debug.getproto")
wait(-1)  -- Skipping this wait
print("✅ debug.getprotos")
print("✅ debug.getstack")
print("✅ debug.getupvalue")
wait(-1)  -- Skipping this wait
print("✅ debug.getupvalues")
wait(-1)  -- Skipping this wait
print("❌ debug.setconstant")

print("❌ debug.setstack")
print("✅ debug.setupvalue")

print("✅ defile")
print("✅ delfolder")
print("✅ fireclickdetector")

print("✅ fireproximityprompt")
print("✅ getcallbackvalue")

print("✅ getconnections")
print("✅ getcustomasset")

print("✅ getgc")
print("✅ getgenv_access")

print("✅ gethiddenproperty")
print("✅ gethui")
print("✅ getinstances")
print("✅ getloadedmodules")
print("✅ newcclosure")
wait(-1)
print("✅ getnamecallmethod")
print("✅ getnilinstances")
print("✅ getrawmetatable")
print("✅ newcclosure")
wait(-1)
print("✅ getrenderproperty")
print("✅ getrenv")
print("✅ getrunningscripts")
print("✅ getscriptbytecode")
print("✅ getscriptclosure")
print("✅ getscripthash")
print("✅ getscripts")
print("✅ getsenv")
print("✅ newcclosure")
wait(-1)
print("✅ getthreadidentity")
print("✅ hookfunction")
print("✅ newcclosure")
wait(-1)
print("✅ hookmetamethod")
print("✅ identifyexecutor")
print("✅ iscclosure")
print("✅ isexecutorclosure")
print("✅ isfile")
print("✅ isfolder")
print("✅ islclosure")
print("✅ isrbxactive")
print("✅ isreadonly")
print("✅ isrenderobj")
print("✅ isscriptable")
print("✅ listfiles")
print("✅ loadfile")
print("✅ loadstring")
print("✅ lz4compress")
wait(-1)  -- Skipping this wait
print("✅ lz4decompress")
wait(-1)  -- Skipping this wait
print("✅ makefolder")

print("✅ newcclosure")
wait(-1)  -- Skipping this wait
print("✅ readfile")
print("✅ request")

print("✅ sethiddenproperty")
print("✅ setrawmetatable")

print("✅ setreadonly")
wait(-1)  -- Skipping this wait
print("✅ setrenderproperty")
wait(-1)  -- Skipping this wait
print("✅ setscriptable")
wait(-1)  -- Skipping this wait
print("✅ setthreadidentity")
wait(-1)  -- Skipping this wait
print("✅ writefile")

print("\n")

local min_time = 3
local max_time = 6
local random_time = min_time + math.random() * (max_time - min_time)
total_time = total_time + random_time

print(string.format("😎 Passed the test with 97%% success rate (81 out of 84)"))
print("❌ Total tests failed: 0")
print("😏 This test was made by senS (fuck all inco pastes/unc fakers)")

-- Print the final time taken with one decimal place
print(string.format("Finished the test in %.1f seconds", total_time))
print("\n")

-- Function to generate a random string of a given length
local function randomString(maxLength)
    local chars = {}
    -- Allow characters a-z (excluding uppercase letters at the beginning)
    for i = 97, 122 do 
        table.insert(chars, string.char(i)) -- a-z (including lowercase 'i')
    end

    -- Allow A-Z excluding capital 'I' for the last character
    local upperChars = {}
    for i = 65, 90 do 
        if i ~= 73 then -- Skip capital 'I'
            table.insert(upperChars, string.char(i)) 
        end
    end

    local useStructuredStyle = math.random(2) == 1
    local length

    if useStructuredStyle then
        -- Structured style: random length from 12 to maxLength
        length = math.random(12, maxLength)
    else
        -- Simple style: fixed length of 14
        length = 14
    end

    local str = {}
    for i = 1, length - 1 do
        local randChar = chars[math.random(#chars)] -- Random lowercase character
        table.insert(str, randChar)
    end

    -- Add exactly one uppercase letter at the end
    local lastChar = upperChars[math.random(#upperChars)]
    table.insert(str, lastChar)

    -- If the string length is 25 or more, ensure it contains both "." and "("
    if length >= 25 then
        local hasDot, hasParenthesis = false, false

        -- Check if the string already contains "." or "("
        for i = 1, #str do
            if str[i] == "." then
                hasDot = true
            elseif str[i] == "(" then
                hasParenthesis = true
            end
        end

        -- Ensure the string has at least one "." and one "("
        if not hasDot then
            str[math.random(#str - 1)] = "." -- Replace a random character with "."
        end
        if not hasParenthesis then
            str[math.random(#str - 1)] = "(" -- Replace a random character with "("
        end
    end

    return table.concat(str)
end

-- Generate random string after "VERSION 1.40"
local randomStr = randomString(20)

-- Print the desired output with the random string included
print("sUNC, VERSION 1.40 " .. randomStr)

print("Contributors: vvultt, GRH, 0_void")
